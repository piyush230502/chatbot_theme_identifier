import chromadb
from chromadb.utils import embedding_functions

def get_chroma_client(db_path: str = "data/chroma_db"):
    """Initializes and returns a ChromaDB persistent client."""
    client = chromadb.PersistentClient(path=db_path)
    return client

def create_collection_if_not_exists(client: chromadb.Client, collection_name: str, embedding_func_config):
    """Creates a collection if it doesn't exist, using specified embedding function."""
    # embedding_func_config is the actual HuggingFaceEmbeddings object from Langchain
    # ChromaDB's embedding_functions.SentenceTransformerEmbeddingFunction is an alternative
    # but Langchain's HuggingFaceEmbeddings is more integrated with the Langchain ecosystem.
    # For direct ChromaDB use with Langchain embeddings, we pass the model name.
    
    # We will use the Langchain HuggingFaceEmbeddings object directly for embedding
    # and pass its model name to Chroma if needed, or let Chroma handle it if we pass texts directly.
    # For this setup, we'll embed outside and add embeddings.
    
    collection = client.get_or_create_collection(
        name=collection_name,
        # embedding_function=embedding_functions.SentenceTransformerEmbeddingFunction(model_name=embedding_func_config.model_name)
        # If we add texts directly, Chroma handles embedding. If we add embeddings, this is less critical here.
        # For adding pre-computed embeddings, metadata for the embedding function can be set.
        # Let's assume we are adding texts and want Chroma to use a compatible sentence transformer.
    )
    return collection

def add_chunks_to_collection(collection: chromadb.Collection, chunks_with_metadata: list):
    """Adds text chunks and their metadata to the collection. Embeddings are generated by Chroma."""
    if not chunks_with_metadata:
        return

    texts = [chunk['text'] for chunk in chunks_with_metadata]
    metadatas = [chunk['metadata'] for chunk in chunks_with_metadata]
    ids = [f"{chunk['metadata']['doc_id']}_p{chunk['metadata']['page_number']}_c{chunk['metadata']['chunk_seq_id']}" for chunk in chunks_with_metadata]
    
    collection.add(documents=texts, metadatas=metadatas, ids=ids)

def search_collection(collection: chromadb.Collection, query_text: str, n_results: int = 5):
    """Searches the collection for relevant documents."""
    results = collection.query(query_texts=[query_text], n_results=n_results, include=['documents', 'metadatas', 'distances'])
    return results